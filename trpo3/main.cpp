/**
 * @file main.cpp
 * В классе описываеются базовые функции для работы с трехмерными объектами. Класс позволяет определять объекты и первично их классифицировать
 * @author Перлин Л.В. ИУ5-14М
 * @brief Класс Diploma содержит в себе базовые функции 
 * @version 1.2.8
 * @date 2022-10-29
 * 
 * @copyright Perlin Leonid (c) 2022
 * 
 */

/**
 * @mainpage Документация по теме диплома (СКУД)
 * @author Перлин Леонид Вадимович
 * @brief Документация по теме диплома (СКУД)
 * @version 1.4
 * @date 2022-10-29
 * \par
 *  @see main.cpp
 * \par
 *  @see Pass
 * @file main.cpp
 */

#include <string.h>

/**
 * Класс пропуска
 * класс содержит функции реализующие работу с пропуском
 * @brief Основной класс программной документации
 * @emoji :clock:
 */
class Pass
{
    private:
        std::string privateKey; ///< Приватный ключ пропуска
        std::string publicKey; ///< Публичный ключ пропуска
        std::datetime issueDate; /// < Дата выдачи пропуска
        std::datetime dueDate; /// <- Дата окончания срока действия пропуска
        std::int32 userID; /// <- ID владельца пропуска
    public:


        /**
         * Функция вычисления текущего временного кода пропуска
         * @brief Вычисление текущего временного кода ключа на основании заданных publicKey и privateKey
         * @see Classification
         * @return Строка с временным кодом
         * @throw неправильный приватный ключ
         */
        std::string generateTOTP ();


        /**
         * Функция вычисления текущего временного кода ключа
         * @brief проверка кода на основании текущего времени и заданных publicKey и privateKey
         * @param totp Проверяемый временный код
         * @see Classification
         * @return результат проверки ключа
         * @throw ошибка во времени системы
         */
        bool checkTOTP (std::string totp);


        
        /**
         * @brief Получение идентификатора пользователя
         * @return идентификатор пользователя
         * @throw Значение не установлено
         */
        std::int32 getUserID();

        /**
         * @brief Получение публичного ключа пользователя
         * @return публичный ключа пользователя
         * @throw Значение не установлено
         */
        std::string getUserPublicKey();


        /**
         * @brief Проверка ключа на действительность по дате
         * @return результат проверки ключа по дате
         * @throw Дата выдачи позже даты окончания действия 
         */
        bool checkOutdated();
};